from pprint import pprint
from dotenv import load_dotenv
from github import Github, Auth
import os
import argparse
from langchain_core.tools import tool
from typing import Annotated
from typing_extensions import TypedDict
from langgraph.graph.message import add_messages
from langgraph.prebuilt import ToolNode, tools_condition
from models import grok, gpt_oss, groq, deepseek, gigachat_pro, gigachat
from langgraph.graph import StateGraph, START

load_dotenv()

# Parse command line arguments
def parse_arguments():
    parser = argparse.ArgumentParser(description='–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä changelog –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–º–∏—Ç–æ–≤ GitHub')
    parser.add_argument('--start-commit', '-s', help='–•–µ—à –∫–æ–º–º–∏—Ç–∞, —Å –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω–∞—á–∏–Ω–∞—Ç—å –æ–±—Ä–∞—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ (SHA)')
    return parser.parse_args()

# Get command line arguments
args = parse_arguments()
start_commit_hash = args.start_commit    

# Define a tool to get commits and tags from GitHub
@tool
def get_commits_and_tags() -> list:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∏—Ç–æ–≤ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–µ—Ç–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–≥–∞—Ö.
        
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö SHA –∫–æ–º–º–∏—Ç–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∫–æ–º–º–∏—Ç–∞ –∏ —Ç–µ–≥ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    """
    
    try:
        auth = Auth.Token(os.getenv("GITHUB_API_TOKEN"))
        g = Github(auth=auth)
        repo = g.get_repo(os.getenv("GITHUB_REPO"))
        sha = start_commit_hash if start_commit_hash else "main"
        commits = repo.get_commits(sha=sha)
        tags = repo.get_tags()
        tag_mapping = {tag.commit.sha: tag.name for tag in tags}
        commit_list = []
        for commit in commits:
            commit_data = {
                'sha': commit.sha,
                'message': commit.commit.message,
                'date': commit.commit.committer.date,
                'tag': tag_mapping.get(commit.sha, None)
            }
            commit_list.append(commit_data)
        return commit_list
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–∏—Ç–æ–≤: {str(e)}"

# create state class for graph
class State(TypedDict):
    messages: Annotated[list, add_messages]
    changelog: str
    needs_human_review: bool

# Setup LLM
llm = gpt_oss

# Bind tools to LLM
tools = [get_commits_and_tags]
llm_with_tools = llm.bind_tools(tools)

# Define chatbot node
def chatbot(state: State):
    """Chatbot node that processes messages and decides whether to use tools."""
    response = llm_with_tools.invoke(state["messages"])
    return {"messages": [response]}

# Define human review node
def human_review(state: State):
    """Human review node for changelog correction."""
    print("\n" + "="*80)
    print("ü§ñ –°–ì–ï–ù–ï–†–ò–†–û–í–ê–ù–ù–´–ô CHANGELOG:")
    print("="*80)
    print(state["changelog"])
    print("="*80)
    
    print("\nüìù –í–ê–†–ò–ê–ù–¢–´ –î–ï–ô–°–¢–í–ò–ô:")
    print("1. –ü—Ä–∏–Ω—è—Ç—å changelog –∫–∞–∫ –µ—Å—Ç—å (–≤–≤–µ–¥–∏—Ç–µ 'accept')")
    print("2. –ò—Å–ø—Ä–∞–≤–∏—Ç—å changelog (–≤–≤–µ–¥–∏—Ç–µ 'edit' –∏ –∑–∞—Ç–µ–º —á—Ç–æ –Ω—É–∂–Ω–æ –∏—Å–ø—Ä–∞–≤–∏—Ç—å)")
    print("3. –ü–æ–ø—Ä–æ—Å–∏—Ç—å –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å (–≤–≤–µ–¥–∏—Ç–µ 'regenerate')")
    print("4. –í—ã–π—Ç–∏ (–≤–≤–µ–¥–∏—Ç–µ 'quit')")
    
    while True:
        user_input = input("\n–í–∞—à –≤—ã–±–æ—Ä: ").strip().lower()
        
        if user_input == 'accept':
            print("‚úÖ Changelog –ø—Ä–∏–Ω—è—Ç!")
            print("üëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
            exit(0)
        elif user_input == 'edit':
            print("\nüìù –í–≤–µ–¥–∏—Ç–µ —Ç—Ä–µ–±—É–µ–º—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è changelog (–∑–∞–≤–µ—Ä—à–∏—Ç–µ –≤–≤–æ–¥ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–æ–π):")
            lines = []
            while True:
                line = input()
                if line == "":
                    break
                lines.append(line)
            
            changelog_corrections = "\n".join(lines)
            if changelog_corrections.strip():
                print("üíº Changelog –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É")
                return {
                    "messages": [{"role": "user", "content": f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—Ä–æ—Å–∏–ª –¥–æ—Ä–∞–±–æ—Ç–∫—É changelog:\n{changelog_corrections}"}],
                    "changelog": changelog_corrections,
                    "needs_human_review": False
                }
            else:
                print("‚ùå –ü—É—Å—Ç–æ–π changelog. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        elif user_input == 'regenerate':
            print("üîÑ –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—é changelog...")
            return {
                "messages": [{"role": "user", "content": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ—Å–∏—Ç –ø–µ—Ä–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å changelog. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π –Ω–æ–≤—ã–π changelog –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ—Ö –∂–µ –∫–æ–º–º–∏—Ç–æ–≤, –Ω–æ —Å —É–ª—É—á—à–µ–Ω–∏—è–º–∏."}],
                "needs_human_review": True
            }
        elif user_input == 'quit':
            print("üëã –í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
            exit(0)
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

# Define changelog extraction node
def extract_changelog(state: State):
    """Extract changelog from LLM response and prepare for human review."""
    last_message = state["messages"][-1]
    if hasattr(last_message, 'content') and last_message.content:
        changelog = last_message.content
        return {
            "changelog": changelog,
            "needs_human_review": True
        }
    return {"needs_human_review": False}

# Define conditional function for routing
def should_review(state: State):
    """Determine if changelog needs human review."""
    if state.get("needs_human_review", False):
        return "human_review"
    else:
        return "chatbot"

# Build the graph
graph_builder = StateGraph(State)
graph_builder.add_node("chatbot", chatbot)
graph_builder.add_node("tools", ToolNode(tools))
graph_builder.add_node("extract_changelog", extract_changelog)
graph_builder.add_node("human_review", human_review)

# Add conditional edges
graph_builder.add_conditional_edges(
    "chatbot",
    tools_condition,
)

# Add edges
graph_builder.add_edge("tools", "chatbot")
graph_builder.add_edge(START, "chatbot")
graph_builder.add_edge("chatbot", "extract_changelog")
graph_builder.add_conditional_edges(
    "extract_changelog",
    should_review,
)
graph_builder.add_edge("human_review", "chatbot")

# Compile the graph
graph = graph_builder.compile()

# Prepare prompts and initial state
system_prompt = """
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–∞–±–æ—Ç–µ —Å GitHub.
–¢—ã —É–º–µ–µ—à—å –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–º–º–∏—Ç–æ–≤ –∏ —Ç–µ–≥–æ–≤.
–¢—ã —É–º–µ–µ—à—å –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç changelog –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–º–∏—Ç–æ–≤ –∏ —Ç–µ–≥–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
"""

user_prompt = """
–ò—Å–ø–æ–ª—å–∑—É–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–º–∏—Ç–æ–≤ —Å —Ç–µ–≥–∞–º–∏ –∏–∑ GitHub.

–¢–µ–≥–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π –Ω–æ–º–µ—Ä–∞ –≤–µ—Ä—Å–∏–π –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ semver.
–û–Ω–∏ —Å–æ—Å—Ç–æ—è—Ç –∏–∑ —Ç—Ä–µ—Ö —á–∞—Å—Ç–µ–π: major, minor, patch.
–ü—Ä–∏–º–µ—Ä—ã:
1.0.0
1.0.1
2.5.19

–¢–µ–±–µ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ —Å–ø–∏—Å–∫–µ –∫–æ–º–º–∏—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∫–æ–º–º–∏—Ç (–Ω–∞–∑–æ–≤–µ–º –µ–≥–æ "last").
–ï—Å–ª–∏ "last" –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç–æ –≤—ã–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç "–ö–æ–º–º–∏—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –Ω–µ–≤–æ–∑–º–æ–∂–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å changelog". –ò –±–æ–ª—å—à–µ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–π.

–ó–∞—Ç–µ–º —Ç–µ–±–µ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ —Å–ø–∏—Å–∫–µ –∫–æ–º–º–∏—Ç–æ–≤ –±–ª–∏–∂–∞–π—à–∏–π –∫ "last" –∫–æ–º–º–∏—Ç, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å —Ç–µ–≥, –∏ patch –≤–µ—Ä—Å–∏—è —Ä–∞–≤–Ω–∞ 0 (–Ω–∞–∑–æ–≤–µ–º –µ–≥–æ "first").
–ï—Å–ª–∏ "first" –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ "first" –≤–æ–∑—å–º–∏ —Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.

–°–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∏—Ç–æ–≤ –º–µ–∂–¥—É "last" –∏ "first", –Ω–∞–∑–æ–≤–µ–º –µ–≥–æ "commits".
–ü—Ä–∏ —ç—Ç–æ–º –≤–∫–ª—é—á–∏ –≤ —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∏—Ç—ã "first" –∏ "last".
–ü–æ—Ä—è–¥–æ–∫ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∫–æ–º–º–∏—Ç–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é (—Å–Ω–∞—á–∞–ª–∞ —Å–∞–º—ã–µ –Ω–æ–≤—ã–µ –∫–æ–º–º–∏—Ç—ã).
–î—Ä—É–≥–∏–µ –∫–æ–º–º–∏—Ç—ã –Ω–µ –Ω—É–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å, –∏—Ö –≤–æ–æ–±—â–µ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ "commits" –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è markdown.
–≠—Ç–∞ —Å—Ç—Ä–æ–∫–∞ –¥–æ–ª–∂–Ω–∞ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —Ç–µ–∫—Å—Ç–∞ "–°–ø–∏—Å–æ–∫ –∫–æ–º–º–∏—Ç–æ–≤ (–¥–ª—è —Å–ø—Ä–∞–≤–∫–∏):" –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ø–∏—Å–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤, –∫–∞–∂–¥—ã–π —ç–ª–µ–º–µ–Ω—Ç –Ω–∞ –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–µ.
–ò—Å–ø–æ–ª—å–∑—É–π —Ñ–æ—Ä–º–∞—Ç: <SHA:8> <—Å–æ–æ–±—â–µ–Ω–∏–µ> <—Ç–µ–≥>
–ü—Ä–∏–º–µ—Ä –¥–ª—è —Å–ø–∏—Å–∫–∞ "commits":
[–Ω–∞—á–∞–ª–æ –ø—Ä–∏–º–µ—Ä–∞]
<!--
–°–ø–∏—Å–æ–∫ –∫–æ–º–º–∏—Ç–æ–≤ (–¥–ª—è —Å–ø—Ä–∞–≤–∫–∏):
- 74a89b35 feat: add new feature
- 12345678 fix: fixed bug [1.27.0]
-->
[–∫–æ–Ω–µ—Ü –ø—Ä–∏–º–µ—Ä–∞]
–í—ã–≤–µ–¥–∏ –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ "commits" –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏.

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π changelog –Ω–∞ –æ—Å–Ω–æ–≤–µ "commits".
–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ markdown.
–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç "first", 
–ª–∏–±–æ —Ç–µ–∫—Å—Ç "–Ω–∞—á–∞–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç", –µ—Å–ª–∏ –≤–µ—Ä—Å–∏–∏ –Ω–µ—Ç –∏ –∫–æ–º–º–∏—Ç —è–≤–ª—è–µ—Ç—Å—è –ø–µ—Ä–≤—ã–º –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏, –ª–∏–±–æ —Ç–µ–∫—Å—Ç "–æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç", –µ—Å–ª–∏ –≤–µ—Ä—Å–∏–∏ –Ω–µ—Ç.
–ü—Ä–∏–º–µ—Ä—ã –¥–ª—è –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å –Ω–æ–º–µ—Ä–æ–º –≤–µ—Ä—Å–∏–∏:
## –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç –≤–µ—Ä—Å–∏–∏: 1.27.0
## –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç –≤–µ—Ä—Å–∏–∏: –Ω–∞—á–∞–ª—å–Ω—ã–π –∫–æ–º–º–∏—Ç
## –ò–∑–º–µ–Ω–µ–Ω–∏—è –æ—Ç –≤–µ—Ä—Å–∏–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç

–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ä–∞–∑–¥–µ–ª—ã –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–æ–≤: 
- –¥–æ–±–∞–≤–ª–µ–Ω–æ (–µ—Å–ª–∏ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã, –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ)
- –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ (–µ—Å–ª–∏ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã, –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –±—ã–ª–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
- –¥—Ä—É–≥–æ–µ (–µ—Å–ª–∏ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã, –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ, –Ω–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏ –Ω–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã —ç—Ç–∏—Ö —Å–ø–∏—Å–∫–æ–≤ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω—ã —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ, –≥–¥–µ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ.
–í –∫–∞–∂–¥–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ —ç—Ç–∏—Ö —Å–ø–∏—Å–∫–æ–≤ –≥–ª–∞–≥–æ–ª—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
–í –∫–∞–∂–¥–æ–º —ç–ª–µ–º–µ–Ω—Ç–µ —ç—Ç–∏—Ö —Å–ø–∏—Å–∫–æ–≤ —Å—É—â–µ—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã–µ –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–∏–π —è–∑—ã–∫, –µ—Å–ª–∏ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ –±–µ–∑ –∏—Å–∫–∞–∂–µ–Ω–∏—è —Å–º—ã—Å–ª–∞.
–ù–∞–ø—Ä–∏–º–µ—Ä, "sidebar" –Ω—É–∂–Ω–æ –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ –Ω–∞ "–±–æ–∫–æ–≤—É—é –ø–∞–Ω–µ–ª—å", –∞ "header" –∏ "footer" –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π.
–ü–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–∞—Ö –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ—Ä—è–¥–∫—É –∫–æ–º–º–∏—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ "commits".
–ï—Å–ª–∏ –≤ –∫–∞–∫–æ–º-—Ç–æ —Å–ø–∏—Å–∫–µ –Ω–µ—Ç —ç–ª–µ–º–µ–Ω—Ç–æ–≤, —Ç–æ –Ω–µ —Å–æ–∑–¥–∞–≤–∞–π —ç—Ç–æ—Ç —Å–ø–∏—Å–æ–∫.

–ü—Ä–∏–º–µ—Ä –¥–ª—è —Å–ø–∏—Å–∫–æ–≤:
[–Ω–∞—á–∞–ª–æ –ø—Ä–∏–º–µ—Ä–∞]
### ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ:
- –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–π–¥–±–∞—Ä
- —Å–æ–∑–¥–∞—Ç—å header
- –¥–æ–±–∞–≤–∏—Ç—å footer

### üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ:
- –ø–æ–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–ª–∏ —Ç–∞–±–ª–∏—Ü—ã
- —É–±—Ä–∞—Ç—å –ª–∏—à–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–º —Å–µ—Ä–≤–∏—Å–∞–º

### üîÑ –î—Ä—É–≥–æ–µ:
- –æ–±–Ω–æ–≤–∏—Ç—å –≤–µ—Ä—Å–∏–∏ –ø–∞–∫–µ—Ç–æ–≤
- –ø–æ–≤—ã—Å–∏—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏
[–∫–æ–Ω–µ—Ü –ø—Ä–∏–º–µ—Ä–∞]

–í—ã–≤–µ–¥–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π changelog –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏.
"""

initial_state = {
    "messages": [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": user_prompt}
    ],
    "changelog": "",
    "needs_human_review": False
}

# Run the agent
print("üöÄ –ó–∞–ø—É—Å–∫ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ changelog...")
response = graph.invoke(initial_state, config={"recursion_limit": 50})

# Final output
if response.get("changelog"):
    print("\n" + "="*80)
    print("üìã –§–ò–ù–ê–õ–¨–ù–´–ô CHANGELOG:")
    print("="*80)
    print(response["changelog"])
    print("="*80)
else:
    print("‚ùå Changelog –Ω–µ –±—ã–ª —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω.")