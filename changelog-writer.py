from pprint import pprint
from dotenv import load_dotenv
from github import Github, Auth
import os
from langchain_core.tools import tool
from typing import Annotated
from typing_extensions import TypedDict
from langgraph.graph.message import add_messages
from langgraph.prebuilt import ToolNode, tools_condition
from models import grok, gpt_oss, groq, deepseek, gigachat_pro, gigachat
from langgraph.graph import StateGraph, START

load_dotenv()

# Define a tool to get commits and tags from GitHub
@tool
def get_commits_and_tags() -> list:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∏—Ç–æ–≤ –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–π –≤–µ—Ç–∫–∏ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ —Ç–µ–≥–∞—Ö.
        
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç:
        –°–ø–∏—Å–æ–∫ —Å–ª–æ–≤–∞—Ä–µ–π, —Å–æ–¥–µ—Ä–∂–∞—â–∏—Ö SHA –∫–æ–º–º–∏—Ç–∞, —Å–æ–æ–±—â–µ–Ω–∏–µ, –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É –∫–æ–º–º–∏—Ç–∞ –∏ —Ç–µ–≥ (–µ—Å–ª–∏ –µ—Å—Ç—å)
    """
    
    try:
        auth = Auth.Token(os.getenv("GITHUB_API_TOKEN"))
        g = Github(auth=auth)
        repo = g.get_repo(os.getenv("GITHUB_REPO"))
        commits = repo.get_commits(sha="main")
        tags = repo.get_tags()
        tag_mapping = {tag.commit.sha: tag.name for tag in tags}
        commit_list = []
        for commit in commits:
            commit_data = {
                'sha': commit.sha,
                'message': commit.commit.message,
                'date': commit.commit.committer.date,
                'tag': tag_mapping.get(commit.sha, None)
            }
            commit_list.append(commit_data)
        return commit_list
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫–æ–º–º–∏—Ç–æ–≤: {str(e)}"

# create state class for graph
class State(TypedDict):
    messages: Annotated[list, add_messages]

# Setup LLM
llm = gpt_oss

# Bind tools to LLM
tools = [get_commits_and_tags]
llm_with_tools = llm.bind_tools(tools)

# Define chatbot node
def chatbot(state: State):
    """Chatbot node that processes messages and decides whether to use tools."""
    response = llm_with_tools.invoke(state["messages"])
    return {"messages": [response]}

# Build the graph
graph_builder = StateGraph(State)
graph_builder.add_node("chatbot", chatbot)
graph_builder.add_node("tools", ToolNode(tools))

# Add conditional edges
graph_builder.add_conditional_edges(
    "chatbot",
    tools_condition,
)

# Add edges
graph_builder.add_edge("tools", "chatbot")
graph_builder.add_edge(START, "chatbot")

# Compile the graph
graph = graph_builder.compile()

# Prepare prompts and initial state
system_prompt = """
–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ —Ä–∞–±–æ—Ç–µ —Å GitHub.
–¢—ã —É–º–µ–µ—à—å –≤—ã–ø–æ–ª–Ω—è—Ç—å —ç–∫—Å–ø–µ—Ä—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∫–æ–º–º–∏—Ç–æ–≤ –∏ —Ç–µ–≥–æ–≤.
–¢—ã —É–º–µ–µ—à—å –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç changelog –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–º–º–∏—Ç–æ–≤ –∏ —Ç–µ–≥–æ–≤ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
"""

user_prompt = """
–ò—Å–ø–æ–ª—å–∑—É–π –¥–æ—Å—Ç—É–ø–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–º–∏—Ç–æ–≤ —Å —Ç–µ–≥–∞–º–∏ –∏–∑ GitHub.

–¢–µ–≥–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π –Ω–æ–º–µ—Ä–∞ –≤–µ—Ä—Å–∏–π –ø—Ä–æ–µ–∫—Ç–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ semver.
–û–Ω–∏ —Å–æ—Å—Ç–æ—è—Ç –∏–∑ —Ç—Ä–µ—Ö —á–∞—Å—Ç–µ–π: major, minor, patch.
–ü—Ä–∏–º–µ—Ä—ã:
1.0.0
1.0.1
2.5.19

–¢–µ–±–µ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ —Å–ø–∏—Å–∫–µ –∫–æ–º–º–∏—Ç–æ–≤ –ø–æ—Å–ª–µ–¥–Ω–∏–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏ –∫–æ–º–º–∏—Ç, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å —Ç–µ–≥ (–Ω–∞–∑–æ–≤–µ–º –µ–≥–æ "last").

–ó–∞—Ç–µ–º —Ç–µ–±–µ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –≤ —Å–ø–∏—Å–∫–µ –∫–æ–º–º–∏—Ç–æ–≤ –∫–æ–º–º–∏—Ç, —É –∫–æ—Ç–æ—Ä–æ–≥–æ –µ—Å—Ç—å —Ç–µ–≥, minor –≤–µ—Ä—Å–∏—è —Ç–∞–∫–∞—è –∂–µ –∫–∞–∫ —É "last", –∏ patch –≤–µ—Ä—Å–∏—è —Ä–∞–≤–Ω–∞ 0 (–Ω–∞–∑–æ–≤–µ–º –µ–≥–æ "first").
–ï—Å–ª–∏ "first" –Ω–µ –Ω–∞–π–¥–µ–Ω, —Ç–æ –≤ –∫–∞—á–µ—Å—Ç–≤–µ "first" –≤–æ–∑—å–º–∏ —Å–∞–º—ã–π –ø–µ—Ä–≤—ã–π –∫–æ–º–º–∏—Ç –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏.

–°–æ—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∏—Ç–æ–≤ –º–µ–∂–¥—É "last" –∏ "first", –Ω–∞–∑–æ–≤–µ–º –µ–≥–æ "commits".
–ü—Ä–∏ —ç—Ç–æ–º –≤–∫–ª—é—á–∏ –≤ —Å–ø–∏—Å–æ–∫ –∫–æ–º–º–∏—Ç—ã "first" –∏ "last".
–ü–æ—Ä—è–¥–æ–∫ —Å–ª–µ–¥–æ–≤–∞–Ω–∏—è –∫–æ–º–º–∏—Ç–æ–≤ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ö—Ä–æ–Ω–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é (—Å–Ω–∞—á–∞–ª–∞ —Å–∞–º—ã–µ –Ω–æ–≤—ã–µ –∫–æ–º–º–∏—Ç—ã).
–î—Ä—É–≥–∏–µ –∫–æ–º–º–∏—Ç—ã –Ω–µ –Ω—É–∂–Ω–æ –≤–∫–ª—é—á–∞—Ç—å, –∏—Ö –≤–æ–æ–±—â–µ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å.

–°–≥–µ–Ω–µ—Ä–∏—Ä—É–π changelog –Ω–∞ –æ—Å–Ω–æ–≤–µ "commits".
–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ.
–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ markdown.
–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –≤ –∫–∞—á–µ—Å—Ç–≤–µ –ø–æ–¥–∑–∞–≥–æ–ª–æ–≤–∫–∞ –Ω–æ–º–µ—Ä –≤–µ—Ä—Å–∏–∏, –∫–æ—Ç–æ—Ä–∞—è —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç "x".
–¢–µ–∫—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ —Ä–∞–∑–¥–µ–ª—ã –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–æ–≤: 
- –¥–æ–±–∞–≤–ª–µ–Ω–æ (–µ—Å–ª–∏ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã, –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –±—ã–ª–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ)
- –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ (–µ—Å–ª–∏ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã, –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –±—ã–ª–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
- –¥—Ä—É–≥–æ–µ (–µ—Å–ª–∏ –µ—Å—Ç—å —ç–ª–µ–º–µ–Ω—Ç—ã, –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ, —á—Ç–æ –±—ã–ª–æ —Å–¥–µ–ª–∞–Ω–æ, –Ω–æ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∏ –Ω–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–æ)
–í—Å–µ —ç–ª–µ–º–µ–Ω—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω—ã —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ (–≥–¥–µ —ç—Ç–æ –≤–æ–∑–º–æ–∂–Ω–æ).
–ü–æ—Ä—è–¥–æ–∫ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–∞—Ö –¥–æ–ª–∂–µ–Ω —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –ø–æ—Ä—è–¥–∫—É –∫–æ–º–º–∏—Ç–æ–≤ –≤ —Å–ø–∏—Å–∫–µ "commits".

–ü—Ä–∏–º–µ—Ä:
[–Ω–∞—á–∞–ª–æ –ø—Ä–∏–º–µ—Ä–∞]
## 2.15.47

### ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ
- –¥–æ–±–∞–≤–∏—Ç—å —Å–∞–π–¥–±–∞—Ä
- —Å–æ–∑–¥–∞—Ç—å header
- –¥–æ–±–∞–≤–∏—Ç—å footer

### üîß –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ
- –ø–æ–ø—Ä–∞–≤–∏—Ç—å —Å—Ç–∏–ª–∏ —Ç–∞–±–ª–∏—Ü—ã
- —É–±—Ä–∞—Ç—å –ª–∏—à–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è –∫ —Å—Ç–æ—Ä–æ–Ω–Ω–∏–º —Å–µ—Ä–≤–∏—Å–∞–º

### üîÑ –î—Ä—É–≥–æ–µ
- –æ–±–Ω–æ–≤–∏—Ç—å –≤–µ—Ä—Å–∏–∏ –ø–∞–∫–µ—Ç–æ–≤
- –ø–æ–≤—ã—Å–∏—Ç—å –ø–æ–∫—Ä—ã—Ç–∏–µ —Ç–µ—Å—Ç–∞–º–∏
[–∫–æ–Ω–µ—Ü –ø—Ä–∏–º–µ—Ä–∞]

–í—ã–≤–µ–¥–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã–π changelog –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏.
"""

initial_state = {
    "messages": [
        {"role": "system", "content": system_prompt},
        {"role": "user", "content": user_prompt}
    ]
}

# Run the agent
response = graph.invoke(initial_state, config={"recursion_limit": 10})

print(response["messages"][-1].content)